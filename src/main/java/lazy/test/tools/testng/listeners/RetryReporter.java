/**
 * @Title: RetryReporter.java
 * @date 2016年4月18日
 */
package lazy.test.tools.testng.listeners;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;

import lazy.test.tools.util.DateUtil;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.IReporter;
import org.testng.ISuite;
import org.testng.ITestResult;
import org.testng.collections.Lists;
import org.testng.collections.Maps;
import org.testng.collections.Sets;
import org.testng.internal.Utils;
import org.testng.reporters.XMLConstants;
import org.testng.reporters.XMLStringBuffer;
import org.testng.xml.XmlSuite;

public class RetryReporter implements IReporter {

	private static final Logger logger = LoggerFactory.getLogger(RetryReporter.class);

	private static final String TESTNG_RETRY_XML = "testng-retry.xml";

	private static final String TESTNG_TIMEOUT_XML = "testng-timeout.xml";

	// set a report to record retry method
	@Override
	public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {
		Map<Class<?>, Set<ITestResult>> results = Maps.newHashMap();
		List<ITestResult> retryTestResults = RetryListener.getRetryTestResults();
		if (null != retryTestResults && retryTestResults.size() > 0) {
			logger.debug("=========Begin to generate retry report==========");
			XMLStringBuffer xsb = new XMLStringBuffer();
			xsb.addComment("Generated by " + getClass().getName() + "  CD-JRQA All Rights Reserved.");
			addResults(retryTestResults, results);
			for (Map.Entry<Class<?>, Set<ITestResult>> entry : results.entrySet()) {
				Class<?> cls = entry.getKey();
				Properties classProperty = new Properties();
				classProperty.setProperty("classname", cls.getName());
				classProperty.setProperty(XMLConstants.ATTR_TIMESTAMP, DateUtil.dateYMdHmsToString(new Date()));

				List<TestTag> testCases = Lists.newArrayList();
				float totalTime = 0;
				int total = 0;
				Map<Integer, TestTag> maps = new HashMap<Integer, RetryReporter.TestTag>();
				for (ITestResult tr : entry.getValue()) {
					int uniqueHashCode = cls.hashCode() + tr.getMethod().hashCode();
					if(!maps.containsKey(uniqueHashCode)){
						TestTag testTag = new TestTag();
						Properties testCaseProperty = new Properties();
						testCaseProperty.setProperty("classname", cls.getName());
						testCaseProperty.setProperty("method", getTestName(tr));
						long time = tr.getEndMillis() - tr.getStartMillis();
						testCaseProperty.setProperty("time", "" + formatTime(time));
						testCaseProperty.setProperty("retry-times", "" + 1);
						total++;
						totalTime += time;
						testTag.properties = testCaseProperty;
						maps.put(uniqueHashCode, testTag);
					}else{
						TestTag testTag = maps.get(uniqueHashCode);
						testTag.properties.setProperty("retry-times", 
								String.valueOf(Integer.parseInt(testTag.properties.get("retry-times").toString())+1));
						maps.put(uniqueHashCode, testTag);
					}
				}
				for (Entry<Integer, TestTag> entry4Map : maps.entrySet()) {
					testCases.add(entry4Map.getValue());
				}
			
				classProperty.setProperty("total", "" + total);
				classProperty.setProperty("time", "" + formatTime(totalTime));
				try {
					classProperty.setProperty(XMLConstants.ATTR_HOSTNAME, InetAddress.getLocalHost().getHostName());
				} catch (UnknownHostException e) {
					// ignore
				}

				xsb.push("Classes", classProperty);
				for (TestTag testTag : testCases) {
					xsb.addEmptyElement("Test", testTag.properties);
				}
				xsb.pop("Classes");
			}
			Utils.writeUtf8File(generateOutputDirectory(outputDirectory), TESTNG_RETRY_XML, xsb.toXML());
			Utils.writeUtf8File(generateOutputDirectory(suites.get(0).getOutputDirectory()), TESTNG_RETRY_XML, xsb.toXML());
			logger.debug("=========End for generate retry report==========");
		}
		
		Set<ITestResult> warnTestResults = ProgressTracker.getExceptionTestRuselts();
		Map<Class<?>, Set<ITestResult>> testReulsts = Maps.newHashMap();
		if (null != warnTestResults && warnTestResults.size() > 0) {
			logger.debug("=========Begin to generate timeout report==========");
			XMLStringBuffer xsb = new XMLStringBuffer();
			xsb.addComment("Generated by " + getClass().getName() + "  CD-JRQA All Rights Reserved.");
			addResults(warnTestResults, testReulsts);
			for (Map.Entry<Class<?>, Set<ITestResult>> entry : testReulsts.entrySet()) {
				Class<?> cls = entry.getKey();
				Properties classProperty = new Properties();
				classProperty.setProperty("classname", cls.getName());
				classProperty.setProperty(XMLConstants.ATTR_TIMESTAMP, DateUtil.dateYMdHmsToString(new Date()));

				List<TestTag> testCases = Lists.newArrayList();
				int failures = 0;
				int errors = 0;
				float totalTime = 0;
				int total = 0;
				int pass = 0;
				for (ITestResult tr : entry.getValue()) {
					TestTag testTag = new TestTag();
					boolean isSuccess = tr.getStatus() == ITestResult.SUCCESS;
					if (!isSuccess) {
						if (tr.getThrowable() instanceof AssertionError) {
							failures++;
						} else {
							errors++;
						}
					}else{
						pass++;
					}
					Properties testCaseProperty = new Properties();
					testCaseProperty.setProperty("classname", cls.getName());
					testCaseProperty.setProperty("method", getTestName(tr));
					long time = tr.getEndMillis() - tr.getStartMillis();
					testCaseProperty.setProperty("time", "" + formatTime(time));
					testCaseProperty.setProperty("status", isSuccess?"PASS":"FAIL");
					total++;
					totalTime += time;
					testTag.properties = testCaseProperty;
					testCases.add(testTag);
				}
				classProperty.setProperty("total", "" + total);
				classProperty.setProperty("pass", "" + pass);
				classProperty.setProperty("failures", "" + failures);
				classProperty.setProperty("errors", "" + errors);
				classProperty.setProperty("time", "" + formatTime(totalTime));
				try {
					classProperty.setProperty(XMLConstants.ATTR_HOSTNAME, InetAddress.getLocalHost().getHostName());
				} catch (UnknownHostException e) {
					// ignore
				}

				xsb.push("Classes", classProperty);
				for (TestTag testTag : testCases) {
					xsb.addEmptyElement("Test", testTag.properties);
				}
				xsb.pop("Classes");
			}
			Utils.writeUtf8File(generateOutputDirectory(outputDirectory), TESTNG_TIMEOUT_XML, xsb.toXML());
			Utils.writeUtf8File(generateOutputDirectory(suites.get(0).getOutputDirectory()), TESTNG_TIMEOUT_XML, xsb.toXML());
			logger.debug("=========End for generate timeout report==========");
		}
	}

	private void addResults(Collection<ITestResult> allResults, Map<Class<?>, Set<ITestResult>> out) {
		for (ITestResult tr : allResults) {
			Class<?> cls = tr.getMethod().getTestClass().getRealClass();
			Set<ITestResult> l = out.get(cls);
			if (l == null) {
				l = Sets.newHashSet();
				out.put(cls, l);
			}
			l.add(tr);
		}
	}

	private String formatTime(float time) {
		DecimalFormatSymbols symbols = new DecimalFormatSymbols();
		// JUnitReports wants points here, regardless of the locale
		symbols.setDecimalSeparator('.');
		DecimalFormat format = new DecimalFormat("#.###", symbols);
		format.setMinimumFractionDigits(3);
		return format.format(time / 1000.0f);
	}

	protected String getTestName(ITestResult tr) {
		return tr.getMethod().getMethodName();
	}

	class TestTag {
		public Properties properties;

		public String message;

		public String type;

		public String stackTrace;

		public String errorTag;
		
		public String status;
	}
	
	/**
	 * 生成retry/timeout的报告路径 in :E:\code\autotesttools\jrqa_tools\test-output
	 * out:E:\code\autotesttools\jrqa_tools\custom-reporter
	 * 
	 * @param outputDirectory
	 * @return
	 */
	private String generateOutputDirectory(String outputDirectory) {
		StringBuffer targetDirectory = new StringBuffer();
		String[] buffer;
		if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
			buffer = outputDirectory.split("\\\\");
			for (int i = 0; i < buffer.length - 1; i++) {
				targetDirectory.append(buffer[i]);
				targetDirectory.append("\\");
			}
			targetDirectory.append("custom-reporter");
		} else {
			buffer = outputDirectory.split("\\/");
			for (int i = 0; i < buffer.length - 1; i++) {
				if (StringUtils.isBlank(buffer[i])) {
					continue;
				}
				targetDirectory.append("/");
				targetDirectory.append(buffer[i]);
			}
			targetDirectory.append("/");
			targetDirectory.append("custom-reporter");
		}
		return targetDirectory.toString();
	}
}
